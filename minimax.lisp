(defparameter board-width 5)
(defparameter board-height 5)
(defparameter road 0)
(defparameter hurdle 1)
(defparameter player 2)
(defparameter enemy 3)

(defun get-game-fild ()
  (block fild
    (let ((arr (make-array (list board-width board-height))))
      (dotimes (i board-width)
        (dotimes (j board-height)
          (setf (aref arr i j) (random 2)))
        )
      (setf (aref arr 0 2) player)
      (setf (aref arr 3 2) enemy)
      (return-from fild arr))
    ))

(defun find-neighbors (x y)
(block find
  (let ((point-list '()))
  (if(/= y 0)
     (push (cons  x (- y 1)) point-list)
  )
    (if(/= x (- board-width 1))
     (push (cons  (+ x 1) y) point-list)
      )
  (if(/= x 0)
     (push (cons  (- x 1) y) point-list)
    )
  (if( /= y (- board-height 1))
     (push (cons x (+ y 1)) point-list)
  )
  (return-from find point-list)
    )))

(defun evaluate (x y field s-x s-y)
  (block eval
  (let ((score 0))
  (setq score (sqrt(+ (expt (- x s-x) 2) (expt (- y s-y) 2))))
    (if (= (aref field x y) hurdle)
        (return-from eval (- score 1))
    (if (or (= (aref field x y) enemy) (= (aref field x y) player))
    (return-from eval (- score 100))
    (return-from eval score))
    )
  )))

(defun minimax (x y maxsimizing field enemy-x enemy-y)
  (block minimax
    (let ((temp 0) (bestmax -1000) (bestmin 1000)(score 0)(result 0) (neighbors '())(best-coords '()))
      (if maxsimizing
          (progn
            (setq neighbors (find-neighbors x y))
            (dolist (coords neighbors)
             (setq score (evaluate (car coords) (cdr coords) field enemy-x enemy-y))
              (setq temp (aref field (car coords) (cdr coords)))
              (setf (aref field x y) temp)
              (setf (aref field (car coords) (cdr coords)) player)
              (setq result (minimax (car coords) (cdr coords)  nil field enemy-x enemy-y))
              (setf (aref field x y) player)
              (setf (aref field (car coords) (cdr coords)) temp)
                  (setq score (+ score result))
                  (if (> score bestmax)
                      (progn
                        (setq bestmax score)
                       (setq best-coords coords)))
                  )
           (return-from minimax best-coords))
          (progn
           (setq neighbors (find-neighbors enemy-x enemy-y))
          (dolist (coords neighbors)
                 (setq score (evaluate (car coords) (cdr coords) field x y))
                 (if (< score bestmin)
                     (progn
                       (setq bestmin score)
                       (setq best-coords coords)))

            )
           (return-from minimax bestmin)))
      )
    ))

(defvar board (get-game-fild))
(write board)
(write-line " ")
(write (minimax 0 2 t board 3 2))
